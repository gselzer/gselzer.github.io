@article{Selzer_Rueden_Hiner_Evans_Harrington_Eliceiri_2023, title={Napari-imagej: Imagej ecosystem access from Napari}, volume={20}, DOI={10.1038/s41592-023-01990-0}, number={10}, journal={Nature Methods}, author={Selzer, Gabriel and Rueden, Curtis and Hiner, Mark and Evans, Edward and Harrington, Kyle and Eliceiri, Kevin}, year={2023}, month={Aug}, pages={1443–1444}} 
@ARTICLE{10.3389/fbinf.2024.1435733,
  
AUTHOR={Selzer, Gabriel J.  and Rueden, Curtis T.  and Hiner, Mark C.  and Evans, Edward L.  and Kolb, David  and Wiedenmann, Marcel  and Birkhold, Christian  and Buchholz, Tim-Oliver  and Helfrich, Stefan  and Northan, Brian  and Walter, Alison  and Schindelin, Johannes  and Pietzsch, Tobias  and Saalfeld, Stephan  and Berthold, Michael R.  and Eliceiri, Kevin W. },
         
TITLE={SciJava Ops: an improved algorithms framework for Fiji and beyond},
        
JOURNAL={Frontiers in Bioinformatics},
        
VOLUME={Volume 4 - 2024},

YEAR={2024},

URL={https://www.frontiersin.org/journals/bioinformatics/articles/10.3389/fbinf.2024.1435733},

DOI={10.3389/fbinf.2024.1435733},

ISSN={2673-7647},

ABSTRACT={Decades of iteration on scientific imaging hardware and software has yielded an explosion in not only the size, complexity, and heterogeneity of image datasets but also in the tooling used to analyze this data. This wealth of image analysis tools, spanning different programming languages, frameworks, and data structures, is itself a problem for data analysts who must adapt to new technologies and integrate established routines to solve increasingly complex problems. While many “bridge” layers exist to unify pairs of popular tools, there exists a need for a general solution to unify new and existing toolkits. The SciJava Ops library presented here addresses this need through two novel principles. Algorithm implementations are declared as plugins called Ops, providing a uniform interface regardless of the toolkit they came from. Users express their needs declaratively to the Op environment, which can then find and adapt available Ops on demand. By using these principles instead of direct function calls, users can write streamlined workflows while avoiding the translation boilerplate of bridge layers. Developers can easily extend SciJava Ops to introduce new libraries and more efficient, specialized algorithm implementations, even immediately benefitting existing workflows. We provide several use cases showing both user and developer benefits, as well as benchmarking data to quantify the negligible impact on overall analysis performance. We have initially deployed SciJava Ops on the Fiji platform, however it would be suitable for integration with additional analysis platforms in the future.}}

@article{https://doi.org/10.1002/cpz1.204,
author = {Gahm, Niklas A. and Rueden, Curtis T. and Evans III, Edward L. and Selzer, Gabriel and Hiner, Mark C. and Chacko, Jenu V. and Gao, Dasong and Sherer, Nathan M. and Eliceiri, Kevin W.},
title = {New Extensibility and Scripting Tools in the ImageJ Ecosystem},
journal = {Current Protocols},
volume = {1},
number = {8},
pages = {e204},
keywords = {deconvolution, Fiji, ImageJ, image analysis, Jython, lifetime analysis, Ops, Python, SciJava, scripting},
doi = {https://doi.org/10.1002/cpz1.204},
url = {https://currentprotocols.onlinelibrary.wiley.com/doi/abs/10.1002/cpz1.204},
eprint = {https://currentprotocols.onlinelibrary.wiley.com/doi/pdf/10.1002/cpz1.204},
abstract = {Abstract ImageJ provides a framework for image processing across scientific domains while being fully open source. Over the years ImageJ has been substantially extended to support novel applications in scientific imaging as they emerge, particularly in the area of biological microscopy, with functionality made more accessible via the Fiji distribution of ImageJ. Within this software ecosystem, work has been done to extend the accessibility of ImageJ to utilize scripting, macros, and plugins in a variety of programming scenarios, e.g., from Groovy and Python and in Jupyter notebooks and cloud computing. We provide five protocols that demonstrate the extensibility of ImageJ for various workflows in image processing. We focus first on Fluorescence Lifetime Imaging Microscopy (FLIM) data, since this requires significant processing to provide quantitative insights into the microenvironments of cells. Second, we show how ImageJ can now be utilized for common image processing techniques, specifically image deconvolution and inversion, while highlighting the new, built-in features of ImageJ—particularly its capacity to run completely headless and the Ops matching feature that selects the optimal algorithm for a given function and data input, thereby enabling processing speedup. Collectively, these protocols can be used as a basis for automating biological image processing workflows. © 2021 Wiley Periodicals LLC. Basic Protocol 1: Using PyImageJ for FLIM data processing Alternate Protocol: Groovy FLIMJ in Jupyter Notebooks Basic Protocol 2: Using ImageJ Ops for image deconvolution Support Protocol 1: Using ImageJ Ops matching feature for image inversion Support Protocol 2: Headless ImageJ deconvolution},
year = {2021}
}

